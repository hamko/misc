/*!
\page library_usage ライブラリの使用方法

1. install_option.hを書き換える\n
RoboLib10には、使用頻度の高いものから低いものまで、様々なモジュールが用意されています。\n
不要なモジュールはコンパイルしない仕様になっているので、まずはどのモジュールをコンパイルするかを指定しなくてはなりません。\n
コンパイルすべきモジュールはcore/install_option.hに定義するマクロによって指定することになっています。\n
例えば、install_option.h内に#define __INSTALL_I_MATH__というマクロが定義されていれば、i_math.hをインクルードしてその機能を利用することができます。\n

利用可能なマクロはすべてinstall_option.h内に#defineあるいは#undefの形で書いてあるので、必要に応じてそれを書き換えてください。\n
また、モジュールは動作保証がなされているStable、なされていないUnstable、まだ開発中であるTestingの3種類に分類されています。\n
Unstable、Testingの利用には予期せぬバグが伴う可能性があることを承知しておいてください。

基本的にはライブラリは一度コンパイルすれば、それ以降コンパイルする必要がないようになっていますが、install_option.hを書き換えた場合は再コンパイルが必要になります。コンパイルの際には、make COMPILER=*** と入力することで、マイコンの種類を指定する必要があります。デフォルトではコンパイルテストしか行いません。デフォルトで選択されるコンパイラの種類はinclude.mkに記述されているので、これを書き換えるといいでしょう。コンパイラの種類は、現在用意されているのはarm-eabi,h8300-elf,pcの3種類です。templete/include_mkもしくはtemplete/subdir_mk内にある.mkファイルの名前がコンパイラの種類に対応するので、ここに必要なMakefileを追加すればこれ以外のマイコンでも使用が可能です。




2. call_function_listをcontrol関数から呼び出す\n
RoboLib10では、割り込みで必要な動作はすべてcall_function_list関数の呼び出しによって行います。\n
ライブラリが正常に機能するためには、この関数を割り込み動作時に呼び出さなくてはなりません。\n
例えば、以下のようにしてください。

\verbatim
#include "function_list.h"

void control(void)
{
    call_function_list();
}
\endverbatim



3. 各種モジュールの初期化手続きを書く\n
従来のライブラリは、ライブラリ内部の変数を直接書き換えて設定を変更する形を取っていました。\n
しかし、これではライブラリを何度もコンパイルする必要があり不便なため、RoboLib10では必要な変数は初期化の際にライブラリに渡すような形になっています。

各モジュールの詳しい初期化の方法は、各モジュールの説明ページを参照してください。\n
また、templeteディレクトリに、初期化のサンプルが用意されているので、それも参考にしてください。

*/
