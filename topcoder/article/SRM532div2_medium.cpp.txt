-簡単な同一視＋実装めんどい。
-最大問題
--全探索はO(n!)で無理そう。
--DPすることも、あるa以上の値で逆像を持つかを判別することも難しそう。
--とりあえず同一視を考えると、すごく簡単にピースを分類できてしまう。
-ピースは以下のように分類出来ます。数字は1で代表させます。
--111 -> mid
--1.. or 11. -> right(に付く)
--..1 or .11 -> left(に付く)
--.1. -> sol
--1.1 -> both
--... -> none
-solの1ピースでmaxか、それ以外のものの組み合わせでmaxのどちらかです。
--最後にsolと他によるmaxのどちらが大きいかをチェックする必要があります。
-midは必ずチェーンに含まれます。
-solやrightやleftは、一つのチェーンを作るに当たって、一個しか使いません。
--なので、最も数字が大きいものだけを選んで一般性を失いません。
-必ずしも必要ではありませんが、以下のような同一視をすると楽です。
--(right:1..) -> (both:1.0)
--(right:11.) -> (both:2.0)
--(left:..1) -> (both:0.1)
--(left:.11) -> (both:0.2)
-すると、bothの同一でない二つのピースを選んで、そのleftとrightの和の最大を全探索(計算量O(n^2))することで、midをはさむハンバーガーのパンの最大を選ぶことが出来ます。
~
 #include <string>
 #include <vector>
 using namespace std;
 
 class DengklekMakingChains {
 public:
   int maxBeauty(vector <string> chains);
 };
 
 #define MAX(a,b) ((a)>(b)?(a):(b))
 int DengklekMakingChains::maxBeauty(vector <string> chains) {
     int right = 0, left = 0, mid = 0;
     int sol = 0;
     int br[100];
     int bl[100];
     int n = 0;
     
     for (int i = 0; i < chains.size(); i++) {
         if (chains[i][0] == '.' && chains[i][1] == '.' && chains[i][2] != '.') 
             right = MAX(right, chains[i][2] - '0');
         else if (chains[i][0] == '.' && chains[i][1] != '.' && chains[i][2] != '.') 
             right = MAX(right, chains[i][2] + chains[i][1] - 2 * '0');
         else if (chains[i][0] != '.' && chains[i][1] == '.' && chains[i][2] == '.') 
             left = MAX(left, chains[i][0] - '0');
         else if (chains[i][0] != '.' && chains[i][1] != '.' && chains[i][2] == '.') 
             left = MAX(left, chains[i][0] + chains[i][1] - 2 * '0');
         else if (chains[i][0] == '.' && chains[i][1] != '.' && chains[i][2] == '.') 
             sol = MAX(sol, chains[i][1] - '0');
         else if (chains[i][0] != '.' && chains[i][1] != '.' && chains[i][2] != '.') 
             mid += chains[i][0] + chains[i][1] + chains[i][2] - 3 * '0';
         else if (chains[i][0] != '.' && chains[i][1] == '.' && chains[i][2] != '.') {
             br[n] = chains[i][0] - '0';
             bl[n] = chains[i][2] - '0';
             n++;
         }
     }
     
     br[n] = 0; bl[n] = right;
     n++;
     br[n] = left; bl[n] = 0;
     n++;
 
     int ijmax = 0;
     for (int i = 0; i < n; i++) 
         for (int j = 0; j < n; j++)
             if (i != j && ijmax < br[i] + bl[j]) 
                 ijmax = br[i] + bl[j];
 
     return MAX(ijmax + mid, sol);
 }

